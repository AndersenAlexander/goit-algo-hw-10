import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as spi

# Defining the function
def f(x):
    return x ** 2

# Integration boundaries
a = 0
b = 2

# Monte Carlo method to estimate the integral
def monte_carlo_integration(f, a, b, num_points=10000):
    x_random = np.random.uniform(a, b, num_points)
    y_random = np.random.uniform(0, max(f(np.linspace(a, b, num_points))), num_points)
    
    below_curve = y_random <= f(x_random)
    integral_estimate = (b - a) * max(f(np.linspace(a, b, num_points))) * np.sum(below_curve) / num_points
    
    return integral_estimate

# Number of random points
num_points = 10000

# Estimate the integral using the Monte Carlo method
monte_carlo_result = monte_carlo_integration(f, a, b, num_points)

# Calculate the integral using the quad function from SciPy
quad_result, quad_error = spi.quad(f, a, b)

# Print the results
print(f"Monte Carlo estimate of the integral: {monte_carlo_result}")
print(f"Quad function result: {quad_result}")
print(f"Difference between Monte Carlo and quad: {abs(monte_carlo_result - quad_result)}")

# Plotting the function and the points used in Monte Carlo
x = np.linspace(-0.5, 2.5, 400)
y = f(x)

# Creating the graph
fig, ax = plt.subplots()

# Drawing the function
ax.plot(x, y, 'r', linewidth=2)

# Filling the area under the curve
ix = np.linspace(a, b)
iy = f(ix)
ax.fill_between(ix, iy, color='gray', alpha=0.3)

# Setting up the graph
ax.set_xlim([x[0], x[-1]])
ax.set_ylim([0, max(y) + 0.1])
ax.set_xlabel('x')
ax.set_ylabel('f(x)')

# Adding integration limits and graph title
ax.axvline(x=a, color='gray', linestyle='--')
ax.axvline(x=b, color='gray', linestyle='--')
ax.set_title(f'Integration of f(x) = x^2 from {a} to {b}')
plt.grid()
plt.show()
